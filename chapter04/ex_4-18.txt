(let ((y '*unassigned*)
      (dy '*unassigned*))
  (let ((y_ (integral (delay dy) y0 dt))
        (dy (stream-map f y)))
    (set! y y_)
    (set! dy dy_)))

((lambda (y dy)
  ((lambda (y_ dy_)
    (set! y y_)
    (set! dy dy_)
    y)
    (integral (delay dy) y0 dt) (dy (stream-map f y))))
  '*unassigned* '*unassigned)

(stream-map f y) is the problematic part of the exercise version as it will be evaluated
with y=='*unassigned*.

Version in text will work fine as everything is in the same scope.
