;; letrec version expands to
(define (f x)
  ((lambda (even? odd?)
     (set! even?
       (lambda (n)
         (if (= n 0)
             true
             (odd? (- n 1)))))
     (set! odd?
       (lambda (n)
         (if (= n 0)
             false
             (even? (- n 1)))))
     ⟨rest of body of f⟩)
     '*unassigned*
     '*unassigned*))

;; let version expands to
(define (f x)
  ((lambda (even? odd?)
     ⟨rest of body of f⟩)
     (lambda (n)
       (if (= n 0)
           true
           (odd? (- n 1))))
     (lambda (n)
       (if (= n 0)
           false
           (even? (- n 1))))))

due to applicative order evaluation, the let version tries to bind the
odd? & even? variables in the lambda function arguments in an environment
that does not contain them, and thus fails.
