#lang sicp

(define (reverse items)
  (define (reverse-iter items acc)
    (if (null? items)
        acc
        (reverse-iter (cdr items) (cons (car items) acc))))
  (reverse-iter items nil))

(define (list-traverse build x)
  ;(display "list-traverse input: ")
  ;(display build)
  ;(newline)
  (if (pair? (car x))
      (if (null? x)
          (cons (deep-reverse (car x)) build)
          (list-traverse (cons (deep-reverse (car x)) build) (cdr x)))
      (if (null? (cdr x))
          (cons (car x) build)
          (list-traverse (cons (car x) build) (cdr x)))))

(define (deep-reverse x)
  ;(display "deep-reverse input: ")
  ;(display x)
  ;(newline)
  ;(if (pair? x)
  ;    (list-traverse (cons (deep-reverse (car x)) nil) (cdr x)))
  ;    x)
  (list-traverse (cons (car x) nil) (cdr x)))

;(define (disp-and-return x y)
;  (display "returning acc ")
;  (display y)
;  (newline)
;  x)
;
;(define (deep-reverse items)
;  (define (reverse-iter items acc)
;    (display "rev iter: ")
;    (display acc)
;    (newline)
;    (if (null? items)
;        (if (pair? items)
;            (disp-and-return acc "pair")
;            (disp-and-return acc "nonpair"))
;        (if (pair? items)
;            (reverse-iter (cdr items) (cons (deep-reverse (car items)) acc))
;            acc)))
;
;  (display "deep rev: ")
;  (display items)
;  (newline)
;  (reverse-iter items nil))

;(define x (list (list 1 2 (list 8 9)) (list 3 4) (list 5 6) 7))
(define x (list (list 1 2) (list 3 4)))
(deep-reverse x)
