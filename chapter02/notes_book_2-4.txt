- The principle of least commitment

- An idea of adding or stripping information at higher and lower levels of abstraction

- Checking a type and calling an appropriate procedure for that type is called _dispatching_

- Weaknesses of dispatch:
    * The generic procedures at higher abstraction level must be taught how to dispatch on a given type
    * Naming clashes must be avoided
    * I.e. not necessarily easy to add dispatch to new types

- Data Directed Programming! Instead of naming everything, just have a lookup table in which ops for new types can be 'installed'
    * Note use of list for type (defined as an interned string here) so that multiple dispatch could be implemented

- Message passing style, operations as closures bound together as the data object. In fact we already saw an example in 2.1.3:

(define (cons x y)
(define (dispatch m)
  (cond ((= m 0) x)
        ((= m 1) y)
        (else 
         (error "Argument not 0 or 1:
                 CONS" m))))
dispatch)

(define (car z) (z 0))
(define (cdr z) (z 1))

- 'Message passing' name comes from the idea that a message is sent to the data object that contains a request for a specific operation.
