#lang sicp
(#%require "utils_symsorted.rkt")
(#%require "ex_2-61.rkt")

(define (union-set-rec s1 s2)
  (cond ((null? s1) s2)
        ((null? s2) s1)
        (else (let ((x1 (car s1)) (x2 (car s2)))
                (cond ((= x1 x2)
                       (cons x1 (union-set-rec (cdr s1) (cdr s2))))
                      ((< x1 x2)
                       (cons x1 (union-set-rec (cdr s1) s2)))
                      ((< x2 x1)
                       (cons x2 (union-set-rec s1 (cdr s2)))))))))

(define (union-set-iter s1 s2)
  (define (union-iter s1 s2 acc)
    (cond ((null? s1) (append acc s2))
          ((null? s2) (append acc s1))
          (else (let ((x1 (car s1)) (x2 (car s2)))
                  (cond ((= x1 x2)
                         (union-iter (cdr s1) (cdr s2) (append acc (list x1))))
                        ((< x1 x2)
                         (union-iter (cdr s1) s2 (append acc (list x1))))
                        ((< x2 x1)
                         (union-iter s1 (cdr s2) (append acc (list x2)))))))))
  (union-iter s1 s2 '()))


(define odds (list 3 5 7))
(union-set-rec odds (list 1))
(union-set-rec odds (list 2 4 6 8))
(union-set-rec odds (list 2 3 4 5 6 7 8 9 10))
(newline)
(union-set-iter odds (list 1))
(union-set-iter odds (list 2 4 6 8))
(union-set-iter odds (list 2 3 4 5 6 7 8 9 10))
