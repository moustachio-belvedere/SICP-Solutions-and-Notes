- EM (Environment Model) is a precise description of:
    * name rule   - for lookup of variable value
    * define rule - creating a new definition of a variable
    * set! rule   - changing the value of a variable
    * lambda rule - creating a procedure
    * application - applying a procedure

- Environments are where state can exist
  * considered as a (nested?) sequences of frames

- GE (Global Environment) is the only env with
  no enclosing environment

- Procedures as objects with inherited context

- Referential transparency no longer holds

- Symbol is no longer a name for a value,
  it now designates a _variable_ which is
  a name for a 'place' in which a value can
  live.

- What's the difference between an environment and a frame?
  * Best answered with a diagram.

E2 -> | z: 10 | -- Frame B

          ^
          |

E1 -> | x: 15 | -- Frame A
      | y: 9  |

The vertical arrow is known as the 'enclosing environment pointer'
as E2 is the enclosing environment of E1.

E1 environment consists of frames A and B whilst
E2 consists of frame B only.

In other words, an environment is a sequence of one or more frames.

A frame as simply a context in which variables are defined?

- When bindings lower down the frame hierarchy have the same name as those higher up,
  this is 'shadowing'

- Expressions only acquire meaning WRT some environment in which it is evaluated 

- Scheme (not necessarily Racket?) does not guarantee l->r or any other specific order of argument evaluation

- A procedure is a pair. Code AND a pointer to an environment
  * 'Code' can be visualised as another pair: (formal parameters, procedure source)

- Procedures only created by evaluating a lambda expression, anything else is syntactic sugar
  * A procedure's environment is the environment in which the lambda expression was evaluated!

- `define` works by adding bindings to frames

- Procedure application creates a new environment in which the formal parameters are bound
  to arguments. The procedure source is then evaluated within this new environment.

  * Note that enclosing environment at procedure application time is the environment in which
    the procedure was created!

- `define` allows rebinding of existing variables (some flavours of lisp/scheme might warn/error on such events though racket doesn't)
  * So, what then are the differences between `set!` and `define`? 
    1. `set!` can't be used for initial definition of binding
    2. `set!` finds first frame in environment that contains binding and modifies it,
       whereas `define` would create a binding in the frame in which it is invoked.
    3. ?

(Note, point 1 behaviour can be modified by the compile-allow-set!-undefined option in Racket.) https://docs.racket-lang.org/reference/eval.html#%28def._%28%28quote._~23~25kernel%29._compile-allow-set%21-undefined%29%29

- Difference between frames and scopes?

- Where procedures generate environments with code, whether procedural code is shared between environments
  or not is implementation defined

- Reminder on let blocks that
  `(let ((<var> <exp>)) <body>)`
  is syntactic sugar for
  `((lambda (<var>) <body>) <exp>)`
  the equality of which is far more meaningful with the benefit of the environment model perspective.

- In book, why does global env arrow point at global env box? As if global env inherits from global env frame? Prob just a misleading graphic.

- Remember that 'frames' here are _not_ the same as 'stack frames' because here they are used to describe static/lexical scoping. An environment model based on stack frames would imply dynamic/stack-based scoping.
