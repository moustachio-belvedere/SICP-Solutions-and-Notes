- Programmatic objects corresponding to physical objects

- Successful OO: debug can be localised, isolated

- Object oriented vs. Stream oriented (data oriented?)

- 'The view that a system is composed of separate objects [each with their own state]
  is most useful when the state variables of the system [entire program] can be grouped
  into closely coupled subsystems that are only loosely coupled to other subsystems'

- Note: mutable state implies the loss of _referential transparency_

- scheme function! notation inspired Julia idiom

- Note: racket raises if error if we try to set! a variable before it is defined

- Footnote 4 says `balance` is encapsulated within the `new-withdraw` _procedure_
  but `new-withdraw` is not strictly a procedure? It is a variable which happens
  to hold the entire let block that also happens to contain a procedure?

- note that the 'let' block is callable!
