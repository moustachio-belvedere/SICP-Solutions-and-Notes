. Abstract processes manipulate abstract data

. A program is a pattern of rules to direct a process

. LISP (LISt Processor), list-oriented programming language!

. A Lisp-based description of a process is described as a 'procedure'

. Language originally 'released' in 1960 in paper:
  "Recursive Functions of Symbolic Expressions and Their Computation by Machine" - J McCarthy

. Expressive power in a programming language is derived from the combination of:
    * Primitive expressions
    * Means of combining those primitive expressions
    * Means of abstraction, combined primitives can be manipulated as units

. Due to W^X constraints on modern hardware/OS, runtime homoiconicity is probably now only possible with high level languages e.g. Lisp, Julia etc

. Even a number is considered a primitive expression, thus => `(+ 3 4)` is considered a compound expression or 'combination'

. Every expression has a value => 'List programmers know the value of everything but the cost of nothing' - A Perlis. (Lisp can be slow.)

. Lisp 'global environment' keeps track of top-level `define` statements

. Lisp evaluates compound operations recursively, can be visualised as a tree-like structure, percolating values up the hierarchy: 'tree accumulation'

. Primitive expressions are equivalent to base cases in a user-defined recursive procedure

. Some exceptions exist to numerals, built-in operators and named variables. These are known as 'special forms', e.g. `(define x 3)` which is NOT a combination

. These special form evaluation rules in addition to the regular recursive evaluation rules constitute the SYNTAX of SICP LISP

. Syntax for defining a function: `(define (<name> <parameters>) <body)` but later in book we learn how to `define` procedures without naming them, and to give names to procedures that have already been created

. Evaluation order: Applicative vs. Normal
    * Normal order: 'fully expand then reduce'
      - Parameterise all operands, only evaluate when reach base case, i.e. when needed (lazy evaluation?)
      - Can lead to work duplication, e.g. sum-of-squares which operand of (+ 5 1) will have to evaluate (+ 5 1) twice at the squaring stage
    * Applicative order: evaluate operator and operands, then apply evaluated operator to evaluated operands
      - Used by Lisp
      - More efficient cf. normal order
      - Easier to reason about when using more complex procedures not capable of being modelled with successive substitutions
    * More on normal + applicative order evaluation later in book.

. ADDITIONAL notes on Applicative vs. Normal evaluation, example:

    ```
    (define (test x y)
      (if (= x 0)
        0
        y))

    ; in applicative, operand is evaluated first
    (test 1 (+ 2 3)) => (test 1 5)

    ; in normal, operand is parameterized and only evaluated if needed
    (test 1 (+ 2 3)) => (test 1 foo)

    ; and for a slightly different case, normal evaluation order leads to
    (test 0 (+ 2 3)) => (+ 2 3) => 5 
    ; note evaluation of addition only performed AFTER branch taken
    ```

. Two conditional operations introduced `cond` and `if`
    * At this stage `if` is equivalent to `cond` with only one clause, but 'catch-all' else clause is implicit for `if`
    * Syntax is (cond (<p0> <e0>) (<p1> <e1>) ... [(else <en>)]) where <px> are predicates, and <ex> are conseqeuent expressions
    * Note use of 'predicate' rather than 'proposition' because it is parameterised, actual values not specified
    * Standard logical compositions available: (and <e1>...<en>), (or <e1>...<en>), (not <e>)

